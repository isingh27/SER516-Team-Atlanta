services:

  authentication:
    image: ishtpreet/ser516_auth:latest
    build: ./authentication
    ports:
      - "5001:5001"
    volumes:
      - ./authentication:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  
  cfd:
    image: ishtpreet/ser516_cfd:latest
    build: ./cfd
    ports:
      - "5004:5004"
    volumes:
      - ./cfd:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1
  
  cycletime:
    image: ishtpreet/ser516_cycletime:latest
    build: ./cycletime
    ports:
      - "5002:5002"
    volumes:
      - ./cycletime:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  leadtime:
    image: ishtpreet/ser516_leadtime:latest
    build: ./leadTime
    ports:
      - "5003:5003"
    volumes:
      - ./leadTime:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  throughput:
    image: ishtpreet/ser516_throughput:latest
    build: ./throughput
    ports:
      - "5005:5005"
    volumes:
      - ./throughput:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  wip:
    image: ishtpreet/ser516_wip:latest
    build: ./wip
    ports:
      - "5006:5006"
    volumes:
      - ./wip:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  burndown:
    image: ishtpreet/ser516_burndown:latest
    build: ./burndown
    ports:
      - "5007:5007"
    volumes:
      - ./burndown:/app
    environment:
      FLASK_APP: server.py
      FLASK_ENV: development
      TAIGA_URL: https://api.taiga.io/api/v1

  sbpbcoupling:
    image: ishtpreet/ser516_sbpbcoupling:latest
    build: ./sbpbcoupling
    ports:
      - "5008:5008"
    volumes:
      - ./sbpbcoupling:/app
    environment:
      FASTAPI_APP: main.py
      TAIGA_URL: https://api.taiga.io/api/v1

  engagement:
    image: ishtpreet/ser516_engagement:latest
    build: ./engagement
    ports:
      - "5009:5009"
    volumes:
      - ./engagement:/app
    environment:
      FASTAPI_APP: main.py
      TAIGA_URL: https://api.taiga.io/api/v1

  taskcoupling:
    image: ishtpreet/ser516_taskcoupling:latest
    build: ./taskcoupling
    ports:
      - "5010:5010"
    volumes:
      - ./taskcoupling:/app
    environment:
      FASTAPI_APP: main.py
      TAIGA_URL: https://api.taiga.io/api/v1

  costofdelay:
    build: ./costofdelay
    ports:
      - "5011:5011"
    volumes:
      - ./costofdelay:/app
    environment:
      FASTAPI_APP: main.py
      TAIGA_URL: https://api.taiga.io/api/v1

  impedimenttracker:
    build: ./impedimentTracker
    ports:
      - "5012:5012"
    volumes:
      - ./impedimentTracker:/app
    environment:
      FASTAPI_APP: main.py
      TAIGA_URL: https://api.taiga.io/api/v1

  apigateway:
    image: ishtpreet/ser516_apigateway:latest
    build: ./apigateway
    ports:
     - "5050:5050"
    volumes:
      - ./apigateway:/app
    environment:
      TAIGA_URL: https://api.taiga.io/api/v1
      AUTH_URL: http://authentication:5001/
      CYCLETIME_URL: http://cycletime:5002/
      LEADTIME_URL: http://leadtime:5003/
      THROUGHPUT_URL: http://throughput:5005/
      CFD_URL: http://cfd:5004/
      WIP_URL: http://wip:5006/
      BURNDOWN_URL: http://burndown:5007/
      SBPBCOUPLING_URL: http://sbpbcoupling:5008/
      ENGAGEMENT_URL: http://engagement:5009/
      TASKCOUPLING_URL: http://taskcoupling:5010/
      COSTOFDELAY_URL: http://costofdelay:5011/
      IMPEDIMENT_TRACKER_URL: http://impedimenttracker:5012/


  frontend:
    image: ishtpreet/ser516_frontend:latest
    build:
      context: ./ui
    ports:
      - "${UI_PORT}:3000"
    volumes:
      - ./ui:/app
      - /app/node_modules
    environment:
      REACT_APP_BACKEND_URI: ${API_URL}
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: 'true' # Helps with hot-reloading in Docker